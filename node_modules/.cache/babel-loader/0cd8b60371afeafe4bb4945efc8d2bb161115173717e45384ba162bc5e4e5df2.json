{"ast":null,"code":"var _jsxFileName = \"H:\\\\DarkSaber\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, IconButton, Typography } from \"@mui/material\";\nimport NewGroupModal from \"./components/NewGroupModal\";\nimport { initDB, useIndexedDB } from \"react-indexed-db\";\nimport { DBConfig } from \"./DBConfig\";\nimport { useSnackbar } from \"notistack\";\nimport { Add } from \"@mui/icons-material\";\nimport Group from \"./components/Group\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ninitDB(DBConfig);\nexport default function App() {\n  _s();\n  const [show, setShow] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const toggle = () => setShow(!show);\n  const db = useIndexedDB(\"Groups\");\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const getAllGroups = () => {\n    db.getAll().then(resp => {\n      setGroups(resp);\n      if (resp.length === 0) {\n        setShow(true);\n      }\n    }, error => {\n      console.error(error);\n    });\n  };\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n  const createGroup = _ref => {\n    let {\n      groupName,\n      groupCount,\n      groupMin\n    } = _ref;\n    db.add({\n      name: groupName,\n      count: shuffle(Number(groupCount), Number(groupMin)),\n      min: Number(groupMin),\n      next: 0,\n      expanded: true\n    }).then(resp => {\n      enqueueSnackbar(\"Group created!\", {\n        variant: \"success\"\n      });\n      getAllGroups();\n    }, error => {\n      console.error(error);\n      enqueueSnackbar(\"Error while creating group..\", {\n        variant: \"error\"\n      });\n    });\n  };\n  const updateGroup = group => {\n    db.update(group).then(resp => {\n      getAllGroups();\n    }, error => {\n      console.error(error);\n    });\n  };\n  const removeGroup = id => {\n    db.deleteRecord(id).then(resp => {\n      getAllGroups();\n    }, error => {\n      console.error(error);\n    });\n  };\n  function shuffle(total, min) {\n    // create array of numbers of 'number' length\n    let array = Array.from({\n        length: total + min\n      }, (_, i) => i + 1),\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      // swap randomly chosen element with current element\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array.filter(num => num > min);\n  }\n  const resetGroup = group => {\n    updateGroup({\n      ...group,\n      count: shuffle(group.total, group.min),\n      next: 0,\n      min: Number(group.min),\n      total: Number(group.total)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      color: \"white\",\n      children: \"Made with \\u2764 by Mein Mann, Wizard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      color: \"success\",\n      size: \"large\",\n      sx: {\n        position: \"absolute\",\n        top: 5,\n        right: 5\n      },\n      onClick: toggle,\n      children: /*#__PURE__*/_jsxDEV(Add, {\n        sx: {\n          fontSize: 35\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewGroupModal, {\n      show: show,\n      toggle: toggle,\n      createGroup: createGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: groups.map(group => /*#__PURE__*/_jsxDEV(Group, {\n        group: group,\n        updateGroup: updateGroup,\n        removeGroup: removeGroup,\n        resetGroup: resetGroup\n      }, group.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"4sBrpQ7iVotqR3YGKPX6cdoQfis=\", false, function () {\n  return [useIndexedDB, useSnackbar];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Container","IconButton","Typography","NewGroupModal","initDB","useIndexedDB","DBConfig","useSnackbar","Add","Group","App","show","setShow","groups","setGroups","toggle","db","enqueueSnackbar","getAllGroups","getAll","then","resp","length","error","console","createGroup","groupName","groupCount","groupMin","add","name","count","shuffle","Number","min","next","expanded","variant","updateGroup","group","update","removeGroup","id","deleteRecord","total","array","Array","from","_","i","j","temp","Math","floor","random","filter","num","resetGroup","position","top","right","fontSize","map"],"sources":["H:/DarkSaber/bingo/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, IconButton, Typography } from \"@mui/material\";\nimport NewGroupModal from \"./components/NewGroupModal\";\nimport { initDB, useIndexedDB } from \"react-indexed-db\";\nimport { DBConfig } from \"./DBConfig\";\nimport { useSnackbar } from \"notistack\";\nimport { Add } from \"@mui/icons-material\";\nimport Group from \"./components/Group\";\n\ninitDB(DBConfig);\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const toggle = () => setShow(!show);\n  const db = useIndexedDB(\"Groups\");\n  const { enqueueSnackbar } = useSnackbar();\n\n  const getAllGroups = () => {\n    db.getAll().then(\n      (resp) => {\n        setGroups(resp);\n        if (resp.length === 0) {\n          setShow(true);\n        }\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n\n  const createGroup = ({ groupName, groupCount, groupMin }) => {\n    db.add({\n      name: groupName,\n      count: shuffle(Number(groupCount), Number(groupMin)),\n      min: Number(groupMin),\n      next: 0,\n      expanded: true,\n    }).then(\n      (resp) => {\n        enqueueSnackbar(\"Group created!\", { variant: \"success\" });\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n        enqueueSnackbar(\"Error while creating group..\", { variant: \"error\" });\n      }\n    );\n  };\n\n  const updateGroup = (group) => {\n    db.update(group).then(\n      (resp) => {\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  const removeGroup = (id) => {\n    db.deleteRecord(id).then(\n      (resp) => {\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  function shuffle(total, min) {\n    // create array of numbers of 'number' length\n    let array = Array.from({ length: total + min }, (_, i) => i + 1),\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      // swap randomly chosen element with current element\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array.filter((num) => num > min);\n  }\n\n  const resetGroup = (group) => {\n    updateGroup({\n      ...group,\n      count: shuffle(group.total, group.min),\n      next: 0,\n      min: Number(group.min),\n      total: Number(group.total),\n    });\n  };\n\n  return (\n    <>\n      <Typography color=\"white\">Made with ‚ù§ by Mein Mann, Wizard</Typography>\n      <IconButton\n        color=\"success\"\n        size=\"large\"\n        sx={{ position: \"absolute\", top: 5, right: 5 }}\n        onClick={toggle}\n      >\n        <Add sx={{ fontSize: 35 }} />\n      </IconButton>\n      <NewGroupModal show={show} toggle={toggle} createGroup={createGroup} />\n      <Container>\n        {groups.map((group) => (\n          <Group\n            key={group.id}\n            group={group}\n            updateGroup={updateGroup}\n            removeGroup={removeGroup}\n            resetGroup={resetGroup}\n          />\n        ))}\n      </Container>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}