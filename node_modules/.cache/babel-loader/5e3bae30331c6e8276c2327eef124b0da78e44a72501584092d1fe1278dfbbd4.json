{"ast":null,"code":"var _jsxFileName = \"H:\\\\DarkSaber\\\\bingo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DBConfig } from \"./DBConfig\";\nimport { initDB } from \"react-indexed-db\";\nimport { useIndexedDB } from \"react-indexed-db\";\nimport Groups from \"./components/Groups\";\nimport NewGroupForm from \"./components/NewGroupForm\";\nimport MenuIcon from \"./components/MenuIcon\";\nimport { Container } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ninitDB(DBConfig);\nexport default function App() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const db = useIndexedDB(\"Groups\");\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const getAllGroups = () => {\n    setGroups([]);\n    db.getAll().then(resp => {\n      setGroups(resp);\n      if (resp.length === 0) {\n        setShowForm(true);\n      }\n    }, error => console.error(error));\n  };\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n  const addGroup = _ref => {\n    let {\n      groupName,\n      groupCount,\n      groupMinNum\n    } = _ref;\n    try {\n      db.add({\n        name: groupName,\n        count: shuffle(groupCount, groupMinNum),\n        next: 0\n      }).then(resp => {\n        enqueueSnackbar(\"Added new group!\", {\n          variant: \"success\"\n        });\n        getAllGroups();\n        setShowForm(false);\n      }, error => {\n        enqueueSnackbar(`${error.target.error}`, {\n          variant: \"error\"\n        });\n        throw new Error(error.target.error);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  function shuffle(number, minNum) {\n    // create array of numbers of 'number' length\n    let array = Array.from({\n        length: Number(number) + Number(minNum)\n      }, (_, i) => i + 1),\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      // swap randomly chosen element with current element\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array.filter(num => num >= minNum);\n  }\n  const removeGroup = id => {\n    try {\n      db.deleteRecord(id).then(resp => {\n        enqueueSnackbar(\"Removed group.\", {\n          variant: \"success\"\n        });\n        getAllGroups();\n      }, error => {\n        enqueueSnackbar(`${error.target.error}`, {\n          variant: \"error\"\n        });\n        throw new Error(error.target.error);\n      });\n    } catch (error) {}\n  };\n  const updateGroup = recordObj => {\n    db.update(recordObj).then(resp => {\n      getAllGroups();\n    }, error => {\n      enqueueSnackbar(`${error.target.error}`, {\n        variant: \"error\"\n      });\n      throw new Error(error.target.error);\n    });\n  };\n  const resetGroup = group => {\n    updateGroup({\n      ...group\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MenuIcon, {\n      toggle: () => setShowForm(!showForm),\n      show: showForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewGroupForm, {\n      db: db,\n      show: showForm,\n      toggle: () => setShowForm(!showForm),\n      addGroup: addGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: groups.map(group => /*#__PURE__*/_jsxDEV(Groups, {\n        group: group,\n        removeGroup: removeGroup,\n        updateGroup: updateGroup,\n        shuffle: shuffle\n      }, group.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"14t+AbSx/+BxYDsnXoD0Zj8DOgg=\", false, function () {\n  return [useIndexedDB, useSnackbar];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DBConfig","initDB","useIndexedDB","Groups","NewGroupForm","MenuIcon","Container","useSnackbar","App","groups","setGroups","showForm","setShowForm","db","enqueueSnackbar","getAllGroups","getAll","then","resp","length","error","console","addGroup","groupName","groupCount","groupMinNum","add","name","count","shuffle","next","variant","target","Error","number","minNum","array","Array","from","Number","_","i","j","temp","Math","floor","random","filter","num","removeGroup","id","deleteRecord","updateGroup","recordObj","update","resetGroup","group","map"],"sources":["H:/DarkSaber/bingo/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { DBConfig } from \"./DBConfig\";\nimport { initDB } from \"react-indexed-db\";\nimport { useIndexedDB } from \"react-indexed-db\";\nimport Groups from \"./components/Groups\";\nimport NewGroupForm from \"./components/NewGroupForm\";\nimport MenuIcon from \"./components/MenuIcon\";\nimport { Container } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\n\ninitDB(DBConfig);\n\nexport default function App() {\n  const [groups, setGroups] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const db = useIndexedDB(\"Groups\");\n  const { enqueueSnackbar } = useSnackbar();\n\n  const getAllGroups = () => {\n    setGroups([]);\n    db.getAll().then(\n      (resp) => {\n        setGroups(resp);\n        if (resp.length === 0) {\n          setShowForm(true);\n        }\n      },\n      (error) => console.error(error)\n    );\n  };\n\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n\n  const addGroup = ({ groupName, groupCount, groupMinNum }) => {\n    try {\n      db.add({\n        name: groupName,\n        count: shuffle(groupCount, groupMinNum),\n        next: 0,\n      }).then(\n        (resp) => {\n          enqueueSnackbar(\"Added new group!\", { variant: \"success\" });\n          getAllGroups();\n          setShowForm(false);\n        },\n        (error) => {\n          enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n          throw new Error(error.target.error);\n        }\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  function shuffle(number, minNum) {\n    // create array of numbers of 'number' length\n    let array = Array.from(\n        { length: Number(number) + Number(minNum) },\n        (_, i) => i + 1\n      ),\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      // swap randomly chosen element with current element\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array.filter((num) => num >= minNum);\n  }\n\n  const removeGroup = (id) => {\n    try {\n      db.deleteRecord(id).then(\n        (resp) => {\n          enqueueSnackbar(\"Removed group.\", { variant: \"success\" });\n          getAllGroups();\n        },\n        (error) => {\n          enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n          throw new Error(error.target.error);\n        }\n      );\n    } catch (error) {}\n  };\n\n  const updateGroup = (recordObj) => {\n    db.update(recordObj).then(\n      (resp) => {\n        getAllGroups();\n      },\n      (error) => {\n        enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n        throw new Error(error.target.error);\n      }\n    );\n  };\n\n  const resetGroup = (group) => {\n    updateGroup({ ...group });\n  };\n\n  return (\n    <>\n      <MenuIcon toggle={() => setShowForm(!showForm)} show={showForm} />\n      <NewGroupForm\n        db={db}\n        show={showForm}\n        toggle={() => setShowForm(!showForm)}\n        addGroup={addGroup}\n      />\n      <Container>\n        {groups.map((group) => (\n          <Groups\n            key={group.id}\n            group={group}\n            removeGroup={removeGroup}\n            updateGroup={updateGroup}\n            shuffle={shuffle}\n          />\n        ))}\n      </Container>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}