[{"H:\\DarkSaber\\bingo\\src\\index.js":"1","H:\\DarkSaber\\bingo\\src\\App.js":"2","H:\\DarkSaber\\bingo\\src\\components\\NewGroupModal.js":"3","H:\\DarkSaber\\bingo\\src\\DBConfig.js":"4","H:\\DarkSaber\\bingo\\src\\components\\Group.js":"5"},{"size":616,"mtime":1675000008991,"results":"6","hashOfConfig":"7"},{"size":3613,"mtime":1675000395459,"results":"8","hashOfConfig":"7"},{"size":2469,"mtime":1675000213929,"results":"9","hashOfConfig":"7"},{"size":655,"mtime":1674995105292,"results":"10","hashOfConfig":"7"},{"size":2474,"mtime":1674999704667,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cuy094",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\DarkSaber\\bingo\\src\\index.js",[],[],"H:\\DarkSaber\\bingo\\src\\App.js",["29","30"],[],"import React, { useEffect, useState } from \"react\";\nimport { Button, Container, IconButton, Typography } from \"@mui/material\";\nimport NewGroupModal from \"./components/NewGroupModal\";\nimport { initDB, useIndexedDB } from \"react-indexed-db\";\nimport { DBConfig } from \"./DBConfig\";\nimport { useSnackbar } from \"notistack\";\nimport { Add } from \"@mui/icons-material\";\nimport Group from \"./components/Group\";\n\ninitDB(DBConfig);\n\nexport default function App() {\n  const [show, setShow] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const toggle = () => setShow(!show);\n  const db = useIndexedDB(\"Groups\");\n  const { enqueueSnackbar } = useSnackbar();\n\n  const getAllGroups = () => {\n    db.getAll().then(\n      (resp) => {\n        setGroups(resp);\n        if (resp.length === 0) {\n          setShow(true);\n        }\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  };\n\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n\n  const createGroup = ({ groupName, groupCount, groupMin }) => {\n    db.add({\n      name: groupName,\n      count: shuffle(Number(groupCount), Number(groupMin)),\n      min: Number(groupMin),\n      total: Number(groupCount),\n      next: 0,\n      expanded: true,\n    }).then(\n      (resp) => {\n        setShow(false);\n        enqueueSnackbar(\"Group created!\", { variant: \"success\" });\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n        enqueueSnackbar(\"Error while creating group..\", { variant: \"error\" });\n        enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n      }\n    );\n  };\n\n  const updateGroup = (group) => {\n    db.update(group).then(\n      (resp) => {\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n        enqueueSnackbar(\"Error updating group..\", { variant: \"error\" });\n        enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n      }\n    );\n  };\n\n  const removeGroup = (id) => {\n    db.deleteRecord(id).then(\n      (resp) => {\n        getAllGroups();\n      },\n      (error) => {\n        console.error(error);\n        enqueueSnackbar(\"Error removing group..\", { variant: \"error\" });\n        enqueueSnackbar(`${error.target.error}`, { variant: \"error\" });\n      }\n    );\n  };\n\n  function shuffle(total, min) {\n    // create array of numbers of 'number' length\n    let array = Array.from({ length: min + total }, (_, i) => i),\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      // swap randomly chosen element with current element\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array.filter((num) => num >= min);\n  }\n\n  const resetGroup = (group) => {\n    updateGroup({\n      ...group,\n      count: shuffle(group.total, group.min),\n      next: 0,\n      min: Number(group.min),\n      total: Number(group.total),\n    });\n  };\n\n  return (\n    <>\n      <Typography color=\"white\" my={2.6}>\n        Made with ‚ù§ by Mein Mann, Wizard\n      </Typography>\n      <Button\n        color=\"warning\"\n        variant=\"contained\"\n        sx={{ position: \"absolute\", top: 10, right: 15 }}\n        onClick={toggle}\n      >\n        <Add sx={{ fontSize: 35 }} />\n      </Button>\n      <NewGroupModal show={show} toggle={toggle} createGroup={createGroup} />\n      <Container>\n        {groups.map((group) => (\n          <Group\n            key={group.id}\n            group={group}\n            updateGroup={updateGroup}\n            removeGroup={removeGroup}\n            resetGroup={resetGroup}\n          />\n        ))}\n      </Container>\n    </>\n  );\n}\n","H:\\DarkSaber\\bingo\\src\\components\\NewGroupModal.js",[],[],[],"H:\\DarkSaber\\bingo\\src\\DBConfig.js",[],[],"H:\\DarkSaber\\bingo\\src\\components\\Group.js",[],[],{"ruleId":"31","severity":1,"message":"32","line":2,"column":29,"nodeType":"33","messageId":"34","endLine":2,"endColumn":39},{"ruleId":"35","severity":1,"message":"36","line":35,"column":6,"nodeType":"37","endLine":35,"endColumn":8,"suggestions":"38"},"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllGroups'. Either include it or remove the dependency array.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [getAllGroups]",{"range":"42","text":"43"},[952,954],"[getAllGroups]"]